{
    "levels": [
        {
            "number": 1,
            "topic": "Linked Lists",
            "description": "Learn about linked lists and how to build them step by step.",
            "requiredStars": 0,
            "questions": [
                {
                    "type": "visualization",
                    "title": "Building a Linked List",
                    "description": "Learn how to build a linked list by following the code and completing the visualization",
                    "hint": "Watch how each node is connected to the next one. The head node is our starting point, and we build the list by connecting nodes in sequence.",
                    "review": "Great job! You've learned the basics of building a linked list. Each node contains a value and points to the next node in the sequence, forming a chain of data.",
                    "difficulty": 1,
                    "visualization": {
                        "code": [
                            "class Node {",
                            "    var value: Int",
                            "    var next: Node?",
                            "}",
                            "",
                            "func createList() {",
                            "    let head = Node(5)",
                            "    head.next = Node(3)",
                            "    head.next.next = Node(7)",
                            "}"
                        ],
                        "dataStructureType": "linkedList",
                        "steps": [
                            {
                                "lineNumber": 1,
                                "comment": "First, we define our Node class",
                                "userInputRequired": false,
                                "availableElements": [],
                                "nodes": [
                                    { "value": "", "label": "head" },
                                    { "value": "" },
                                    { "value": "" }
                                ],
                                "connections": [
                                    {
                                        "from": 0,
                                        "to": 1,
                                        "style": "straight"
                                    },
                                    {
                                        "from": 1,
                                        "to": 2,
                                        "style": "straight"
                                    }
                                ]
                            },
                            {
                                "lineNumber": 7,
                                "comment": "Create the head node with value 5",
                                "userInputRequired": false,
                                "availableElements": [],
                                "nodes": [
                                    { "value": "5", "label": "head" },
                                    { "value": "" },
                                    { "value": "" }
                                ],
                                "connections": [
                                    {
                                        "from": 0,
                                        "to": 1,
                                        "style": "straight"
                                    },
                                    {
                                        "from": 1,
                                        "to": 2,
                                        "style": "straight"
                                    }
                                ]
                            },
                            {
                                "lineNumber": 8,
                                "comment": "Add the second node with value 3",
                                "userInputRequired": true,
                                "availableElements": ["3", "7", "9"],
                                "nodes": [
                                    { "value": "5", "label": "head" },
                                    { "value": "" },
                                    { "value": "" }
                                ],
                                "connections": [
                                    {
                                        "from": 0,
                                        "to": 1,
                                        "style": "straight"
                                    },
                                    {
                                        "from": 1,
                                        "to": 2,
                                        "style": "straight"
                                    }
                                ]
                            },
                            {
                                "lineNumber": 9,
                                "comment": "Complete the linked list by adding 7",
                                "userInputRequired": true,
                                "availableElements": ["7"],
                                "nodes": [
                                    { "value": "5", "label": "head" },
                                    { "value": "3" },
                                    { "value": "" }
                                ],
                                "connections": [
                                    {
                                        "from": 0,
                                        "to": 1,
                                        "style": "straight"
                                    },
                                    {
                                        "from": 1,
                                        "to": 2,
                                        "style": "straight"
                                    }
                                ]
                            }
                        ]
                    }
                },
                {
                    "type": "visualization",
                    "title": "Inserting into a Linked List",
                    "description": "Learn how to insert a new node into the middle of a linked list",
                    "hint": "When inserting a node in the middle, we need to: 1) Create the new node, 2) Point it to the next node, 3) Update the previous node to point to our new node.",
                    "review": "Excellent! You've mastered inserting nodes into a linked list. Remember the order of operations: first connect the new node to the next one, then update the previous node's pointer.",
                    "difficulty": 2,
                    "visualization": {
                        "code": [
                            "func insertNode(value: Int, after: Node) {",
                            "    let newNode = Node(value)",
                            "    newNode.next = after.next",
                            "    after.next = newNode",
                            "}"
                        ],
                        "dataStructureType": "linkedList",
                        "steps": [
                            {
                                "lineNumber": 1,
                                "comment": "We start with an existing linked list",
                                "userInputRequired": false,
                                "availableElements": [],
                                "nodes": [
                                    { "value": "1", "label": "head" },
                                    { "value": "3" },
                                    { "value": "5" }
                                ],
                                "connections": [
                                    {
                                        "from": 0,
                                        "to": 1,
                                        "style": "straight"
                                    },
                                    {
                                        "from": 1,
                                        "to": 2,
                                        "style": "straight"
                                    }
                                ]
                            },
                            {
                                "lineNumber": 2,
                                "comment": "Create a new node with value 4",
                                "userInputRequired": true,
                                "availableElements": ["4"],
                                "nodes": [
                                    { "value": "1", "label": "head" },
                                    { "value": "3" },
                                    { "value": "5" },
                                    { "value": "" }
                                ],
                                "connections": [
                                    {
                                        "from": 0,
                                        "to": 1,
                                        "style": "straight"
                                    },
                                    {
                                        "from": 1,
                                        "to": 2,
                                        "style": "straight"
                                    }
                                ]
                            },
                            {
                                "lineNumber": 3,
                                "comment": "Point the new node to the next node (5)",
                                "userInputRequired": false,
                                "availableElements": [],
                                "nodes": [
                                    { "value": "1", "label": "head" },
                                    { "value": "3" },
                                    { "value": "5" },
                                    { "value": "4" }
                                ],
                                "connections": [
                                    {
                                        "from": 0,
                                        "to": 1,
                                        "style": "straight"
                                    },
                                    {
                                        "from": 1,
                                        "to": 2,
                                        "style": "straight"
                                    },
                                    {
                                        "from": 3,
                                        "to": 2,
                                        "style": "straight"
                                    }
                                ]
                            },
                            {
                                "lineNumber": 4,
                                "comment": "Update the previous node to point to the new node",
                                "userInputRequired": false,
                                "availableElements": [],
                                "nodes": [
                                    { "value": "1", "label": "head" },
                                    { "value": "3" },
                                    { "value": "5" },
                                    { "value": "4" }
                                ],
                                "connections": [
                                    {
                                        "from": 0,
                                        "to": 1,
                                        "style": "straight"
                                    },
                                    {
                                        "from": 1,
                                        "to": 3,
                                        "style": "straight"
                                    },
                                    {
                                        "from": 3,
                                        "to": 2,
                                        "style": "straight"
                                    }
                                ]
                            }
                        ]
                    }
                },
                {
                    "type": "visualization",
                    "title": "Deleting from a Linked List",
                    "description": "Learn how to remove a node from a linked list",
                    "hint": "To delete a node, we need to update the previous node's pointer to skip over the node we want to delete. The skipped node will no longer be part of the list.",
                    "review": "Well done! You've learned how to delete nodes from a linked list. By updating the pointers to skip a node, we effectively remove it from the list without breaking the chain.",
                    "difficulty": 2,
                    "visualization": {
                        "code": [
                            "func deleteNode(after: Node) {",
                            "    // Skip the next node by updating the pointer",
                            "    after.next = after.next?.next",
                            "}"
                        ],
                        "dataStructureType": "linkedList",
                        "steps": [
                            {
                                "lineNumber": 1,
                                "comment": "We start with an existing linked list",
                                "userInputRequired": false,
                                "availableElements": [],
                                "nodes": [
                                    { "value": "2", "label": "head" },
                                    { "value": "4" },
                                    { "value": "6" },
                                    { "value": "8" }
                                ],
                                "connections": [
                                    {
                                        "from": 0,
                                        "to": 1,
                                        "style": "straight"
                                    },
                                    {
                                        "from": 1,
                                        "to": 2,
                                        "style": "straight"
                                    },
                                    {
                                        "from": 2,
                                        "to": 3,
                                        "style": "straight"
                                    }
                                ]
                            },
                            {
                                "lineNumber": 3,
                                "comment": "Update the pointer to skip node with value 6",
                                "userInputRequired": false,
                                "availableElements": [],
                                "nodes": [
                                    { "value": "2", "label": "head" },
                                    { "value": "4" },
                                    { "value": "6", "isHighlighted": true },
                                    { "value": "8" }
                                ],
                                "connections": [
                                    {
                                        "from": 0,
                                        "to": 1,
                                        "style": "straight"
                                    },
                                    {
                                        "from": 1,
                                        "to": 3,
                                        "style": "straight"
                                    },
                                    {
                                        "from": 2,
                                        "to": 3,
                                        "style": "straight",
                                        "isHighlighted": true
                                    }
                                ]
                            },
                            {
                                "lineNumber": 3,
                                "comment": "Node is now removed from the list",
                                "userInputRequired": false,
                                "availableElements": [],
                                "nodes": [
                                    { "value": "2", "label": "head" },
                                    { "value": "4" },
                                    { "value": "8" }
                                ],
                                "connections": [
                                    {
                                        "from": 0,
                                        "to": 1,
                                        "style": "straight"
                                    },
                                    {
                                        "from": 1,
                                        "to": 2,
                                        "style": "straight"
                                    }
                                ]
                            }
                        ]
                    }
                }
            ]
        },
        {
            "number": 2,
            "topic": "Binary Trees",
            "description": "Learn about binary trees and how they organize data hierarchically.",
            "requiredStars": 3,
            "questions": [
                {
                    "type": "visualization",
                    "title": "Building a Binary Tree",
                    "description": "Learn how to construct a basic binary tree by adding nodes as left and right children",
                    "hint": "Each node in a binary tree can have up to two children: a left child and a right child.",
                    "review": "Excellent! You've learned how to create a basic binary tree structure. Remember that each node can have at most two children.",
                    "difficulty": 1,
                    "visualization": {
                        "code": [
                            "class TreeNode {",
                            "    var value: Int",
                            "    var left: TreeNode?",
                            "    var right: TreeNode?",
                            "}",
                            "",
                            "func createTree() {",
                            "    let root = TreeNode(10)",
                            "    root.left = TreeNode(5)",
                            "    root.right = TreeNode(15)",
                            "}"
                        ],
                        "dataStructureType": "binaryTree",
                        "steps": [
                            {
                                "lineNumber": 1,
                                "comment": "First, we define our TreeNode class",
                                "userInputRequired": false,
                                "availableElements": [],
                                "nodes": [
                                    { "value": "", "label": "root" }
                                ],
                                "connections": []
                            },
                            {
                                "lineNumber": 8,
                                "comment": "Create the root node with value 10",
                                "userInputRequired": false,
                                "availableElements": [],
                                "nodes": [
                                    { "value": "10", "label": "root" }
                                ],
                                "connections": []
                            },
                            {
                                "lineNumber": 9,
                                "comment": "Add the left child with value 5",
                                "userInputRequired": true,
                                "availableElements": ["5"],
                                "nodes": [
                                    { "value": "10", "label": "root" },
                                    { "value": "" }
                                ],
                                "connections": [
                                    {
                                        "from": 0,
                                        "to": 1,
                                        "style": "curved",
                                        "label": "left"
                                    }
                                ]
                            },
                            {
                                "lineNumber": 10,
                                "comment": "Add the right child with value 15",
                                "userInputRequired": true,
                                "availableElements": ["15"],
                                "nodes": [
                                    { "value": "10", "label": "root" },
                                    { "value": "5" },
                                    { "value": "" }
                                ],
                                "connections": [
                                    {
                                        "from": 0,
                                        "to": 1,
                                        "style": "curved",
                                        "label": "left"
                                    },
                                    {
                                        "from": 0,
                                        "to": 2,
                                        "style": "curved",
                                        "label": "right"
                                    }
                                ]
                            }
                        ]
                    }
                },
                {
                    "type": "visualization",
                    "title": "Inserting into a Binary Search Tree",
                    "description": "Learn how to insert a new node into a binary search tree while maintaining the ordering property",
                    "hint": "In a binary search tree, values less than a node go to the left, greater values go to the right.",
                    "review": "Great job! You've learned how to maintain the binary search tree property when inserting new nodes.",
                    "difficulty": 2,
                    "visualization": {
                        "code": [
                            "func insert(_ value: Int, into node: TreeNode) {",
                            "    if value < node.value {",
                            "        if node.left == nil {",
                            "            node.left = TreeNode(value)",
                            "        }",
                            "    } else {",
                            "        if node.right == nil {",
                            "            node.right = TreeNode(value)",
                            "        }",
                            "    }"
                        ],
                        "dataStructureType": "binaryTree",
                        "steps": [
                            {
                                "lineNumber": 1,
                                "comment": "Start with an existing binary search tree",
                                "userInputRequired": false,
                                "availableElements": [],
                                "nodes": [
                                    { "value": "10", "label": "root" },
                                    { "value": "5" },
                                    { "value": "15" }
                                ],
                                "connections": [
                                    {
                                        "from": 0,
                                        "to": 1,
                                        "style": "curved",
                                        "label": "left"
                                    },
                                    {
                                        "from": 0,
                                        "to": 2,
                                        "style": "curved",
                                        "label": "right"
                                    }
                                ]
                            },
                            {
                                "lineNumber": 2,
                                "comment": "Inserting 7: Compare with root (10). Since 7 < 10, go left",
                                "userInputRequired": false,
                                "availableElements": [],
                                "nodes": [
                                    { "value": "10", "label": "root", "isHighlighted": true },
                                    { "value": "5" },
                                    { "value": "15" },
                                    { "value": "7" }
                                ],
                                "connections": [
                                    {
                                        "from": 0,
                                        "to": 1,
                                        "style": "curved",
                                        "label": "left",
                                        "isHighlighted": true
                                    },
                                    {
                                        "from": 0,
                                        "to": 2,
                                        "style": "curved",
                                        "label": "right"
                                    }
                                ]
                            },
                            {
                                "lineNumber": 4,
                                "comment": "7 > 5, so it becomes the right child of 5",
                                "userInputRequired": true,
                                "availableElements": ["7"],
                                "nodes": [
                                    { "value": "10", "label": "root" },
                                    { "value": "5", "isHighlighted": true },
                                    { "value": "15" },
                                    { "value": "" }
                                ],
                                "connections": [
                                    {
                                        "from": 0,
                                        "to": 1,
                                        "style": "curved",
                                        "label": "left"
                                    },
                                    {
                                        "from": 0,
                                        "to": 2,
                                        "style": "curved",
                                        "label": "right"
                                    },
                                    {
                                        "from": 1,
                                        "to": 3,
                                        "style": "curved",
                                        "label": "right",
                                        "isHighlighted": true
                                    }
                                ]
                            }
                        ]
                    }
                },
                {
                    "type": "visualization",
                    "title": "Tree Traversal",
                    "description": "Learn how to traverse a binary tree in-order",
                    "hint": "In-order traversal visits the left subtree, then the current node, then the right subtree.",
                    "review": "Excellent! You've learned how to perform an in-order traversal of a binary tree.",
                    "difficulty": 2,
                    "visualization": {
                        "code": [
                            "func inorderTraversal(_ node: TreeNode) {",
                            "    if let left = node.left {",
                            "        inorderTraversal(left)",
                            "    }",
                            "    print(node.value)",
                            "    if let right = node.right {",
                            "        inorderTraversal(right)",
                            "    }",
                            "}"
                        ],
                        "dataStructureType": "binaryTree",
                        "steps": [
                            {
                                "lineNumber": 1,
                                "comment": "Start with a binary tree",
                                "userInputRequired": false,
                                "availableElements": [],
                                "nodes": [
                                    { "value": "8", "label": "root" },
                                    { "value": "4" },
                                    { "value": "12" },
                                    { "value": "2" },
                                    { "value": "6" }
                                ],
                                "connections": [
                                    {
                                        "from": 0,
                                        "to": 1,
                                        "style": "curved",
                                        "label": "left"
                                    },
                                    {
                                        "from": 0,
                                        "to": 2,
                                        "style": "curved",
                                        "label": "right"
                                    },
                                    {
                                        "from": 1,
                                        "to": 3,
                                        "style": "curved",
                                        "label": "left"
                                    },
                                    {
                                        "from": 1,
                                        "to": 4,
                                        "style": "curved",
                                        "label": "right"
                                    }
                                ]
                            },
                            {
                                "lineNumber": 3,
                                "comment": "Visit the leftmost path first",
                                "userInputRequired": false,
                                "availableElements": [],
                                "nodes": [
                                    { "value": "8", "label": "root" },
                                    { "value": "4" },
                                    { "value": "12" },
                                    { "value": "2", "isHighlighted": true },
                                    { "value": "6" }
                                ],
                                "connections": [
                                    {
                                        "from": 0,
                                        "to": 1,
                                        "style": "curved",
                                        "label": "left",
                                        "isHighlighted": true
                                    },
                                    {
                                        "from": 0,
                                        "to": 2,
                                        "style": "curved",
                                        "label": "right"
                                    },
                                    {
                                        "from": 1,
                                        "to": 3,
                                        "style": "curved",
                                        "label": "left",
                                        "isHighlighted": true
                                    },
                                    {
                                        "from": 1,
                                        "to": 4,
                                        "style": "curved",
                                        "label": "right"
                                    }
                                ]
                            },
                            {
                                "lineNumber": 5,
                                "comment": "Process nodes in-order: 2, 4, 6, 8, 12",
                                "userInputRequired": true,
                                "availableElements": ["2", "4", "6", "8", "12"],
                                "nodes": [
                                    { "value": "8", "label": "root" },
                                    { "value": "4" },
                                    { "value": "12" },
                                    { "value": "2" },
                                    { "value": "6" }
                                ],
                                "connections": [
                                    {
                                        "from": 0,
                                        "to": 1,
                                        "style": "curved",
                                        "label": "left"
                                    },
                                    {
                                        "from": 0,
                                        "to": 2,
                                        "style": "curved",
                                        "label": "right"
                                    },
                                    {
                                        "from": 1,
                                        "to": 3,
                                        "style": "curved",
                                        "label": "left"
                                    },
                                    {
                                        "from": 1,
                                        "to": 4,
                                        "style": "curved",
                                        "label": "right"
                                    }
                                ]
                            }
                        ]
                    }
                }
            ]
        }
    ]
} 